{
  "ver": "1.0.25",
  "uuid": "0a6a2116-0848-4cc8-bbff-a0da8d855b19",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 u_uvOffset;\nuniform vec4 u_color;\nuniform vec4 u_baseColor;\nuniform float u_uvRotated;\nuniform float u_action;\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid main () {\n  vec2 uvOffset;\n  uvOffset.x = (v_uv0.x-u_uvOffset.x)/(u_uvOffset.z-u_uvOffset.x);\n  uvOffset.y = (v_uv0.y-u_uvOffset.y)/(u_uvOffset.w-u_uvOffset.y);\n  if(u_uvRotated > 0.5) {\n    float temp = uvOffset.x;\n    uvOffset.x = uvOffset.y;\n    uvOffset.y = 1.0 - temp;\n  }\n  vec4 o = u_baseColor;\n  vec2 seed = uvOffset;\n  if (u_action > 0.5) {\n    seed *= cc_time.x;\n  }\n  float r = rand(seed);\n  if (u_color.x > 0.5) o.r *= r;\n  if (u_color.y > 0.5) o.g *= r;\n  if (u_color.z > 0.5) o.b *= r;\n  if (u_color.w > 0.5) o.a *= r;\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform BG {\n  vec4 u_uvOffset;\n  vec4 u_color;\n  vec4 u_baseColor;\n  float u_uvRotated;\n  float u_action;\n};\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid main () {\n  vec2 uvOffset;\n  uvOffset.x = (v_uv0.x-u_uvOffset.x)/(u_uvOffset.z-u_uvOffset.x);\n  uvOffset.y = (v_uv0.y-u_uvOffset.y)/(u_uvOffset.w-u_uvOffset.y);\n  if(u_uvRotated > 0.5) {\n    float temp = uvOffset.x;\n    uvOffset.x = uvOffset.y;\n    uvOffset.y = 1.0 - temp;\n  }\n  vec4 o = u_baseColor;\n  vec2 seed = uvOffset;\n  if (u_action > 0.5) {\n    seed *= cc_time.x;\n  }\n  float r = rand(seed);\n  if (u_color.x > 0.5) o.r *= r;\n  if (u_color.y > 0.5) o.g *= r;\n  if (u_color.z > 0.5) o.b *= r;\n  if (u_color.w > 0.5) o.a *= r;\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}